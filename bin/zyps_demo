#!/usr/local/bin/ruby

# Copyright 2007 Jay McGavren, jay@mcgavren.com.
# 
# This file is part of Zyps.
# 
# Zyps is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


begin
	require 'zyps'
	require 'zyps/views/trails'
rescue LoadError
	require 'rubygems'
	require 'zyps'
	require 'zyps/views/trails'
end


class Demo

	#The view width.
	WIDTH = 400
	#The view height.
	HEIGHT = 300
	#Number of frames to draw per demo.
	FRAME_COUNT = 80
	#Number of frames per second.
	FRAMES_PER_SECOND = 30
	#Default size of game objects.
	DEFAULT_OBJECT_SIZE = 78.5 #5 units in radius.

	#Set up a window, a canvas, and an object environment, then run the given block.
	def demo

		#Create a window, and set GTK up to quit when it is closed.
		window = Gtk::Window.new
		window.signal_connect("delete_event") {false}
		window.signal_connect("destroy") {Gtk.main_quit}
		
		#Add view to window.
		@view = TrailsView.new(WIDTH, HEIGHT)
		window.add(@view.canvas)
		window.show_all
		
		#Create environment.
		@environment = Environment.new
		
		#Point view at environment.
		@environment.add_observer(@view)
		
		#Run the given block.
		yield
		
		#Activate the GUI.
		Gtk.main
		
		#A divider for explanation text between demos.
		say("-" * 30)
		
	end


	#Animate an environment for a given number of frames.
	def animate(frame_count)
	
		#A clock to track frames to draw this second.
		clock = Clock.new
		time_per_frame = 1.0 / FRAMES_PER_SECOND
		
		begin
			(1..frame_count).each do |i|
				@environment.interact
				#Determine how much time is left in this frame.
				time_left_in_frame = (time_per_frame) - clock.elapsed_time
				#Sleep for the remaining time.
				if time_left_in_frame > 0
					sleep time_left_in_frame
				#Skip a frame if things are going too slow.
				else
					sleep time_per_frame
				end
			end
		rescue Exception => exception
			puts exception, exception.backtrace
		end
		
	end


	#Populate an environment with the given number of creatures.
	def populate(environment, count = 50)
		count.times do |i|
			multiplier = i / count.to_f
			environment.objects << Creature.new(
				i, #Name.
				Location.new(multiplier * @view.width, multiplier * @view.height),
				Color.new(multiplier, 1 - multiplier, multiplier / 2 + 0.5),
				Vector.new(100 * multiplier, multiplier * 360),
				0, #Age.
				DEFAULT_OBJECT_SIZE #Size.
			)
		end
	end

	
	#Explain what's going on to the user.
	def say(phrase)
		puts phrase
	end


	#Demonstrates drawing an environment and changing its size.
	def test_render
				
		thread = Thread.new do
		
			say("The things that populate an environment are called GameObjects.  Each object has:")
			object = GameObject.new
			say("...a name")
			object.name = "Huey"
			say("...a size")
			object.size = DEFAULT_OBJECT_SIZE
			say("...a Location with x and y coordiates")
			object.location = Location.new(@view.width/2, @view.height/2)
			say("...a Color with red, green and blue components ranging from 0 to 1")
			object.color = Color.new(1, 0, 0)
			say("...and a Vector giving its speed and an angle from 0 to 360.")
			object.vector = Vector.new(10, 45)
			
			say("Once your object is ready, add it to the environment.")
			@environment.objects << object
		
			say("Call a view's render(objects) method to draw the objects.")
			say("Call an environment's interact() method to have the objects in it move around.")
			say("Our demo's animate() method does both these things for us.")
			animate(FRAME_COUNT)
			
			say("Let's add a couple more objects with different colors and vectors.")
			@environment.objects << GameObject.new(
				"Duey", #Name.
				Location.new(@view.width/2, @view.height/2),
				Color.new(0, 1, 0),
				Vector.new(20, 135),
				0, #Age.
				DEFAULT_OBJECT_SIZE * 2 #Size.
			)
			@environment.objects << GameObject.new(
				"Louie", #Name.
				Location.new(@view.width/2, @view.height/2),
				Color.new(0, 0, 1),
				Vector.new(30, 225),
				0, #Age.
				DEFAULT_OBJECT_SIZE * 3 #Size.
			)
			animate(FRAME_COUNT)
			
			say("The viewing area can be resized at any time via its width and height attributes.")
			@view.width += 100
			@view.height += 100
			animate(FRAME_COUNT)
			
			say("TrailsView lets you set the length of the trails as well.")
			@view.trail_length = 50
			animate(FRAME_COUNT)
			
		end
		
	end


	class Gravity < EnvironmentalFactor
		#Accelerate object toward the 'ground'.
		def act(target)
			target.vector.y += 9.8
		end
	end
	
	#Demonstrates environmental factors by adding gravity to the environment.
	def test_environmental_factors

		populate(@environment)
		
		thread = Thread.new do
		
			say("Without gravity, objects just travel on forever.")
			animate(FRAME_COUNT)
			
			say("Let's add a new EnvironmentalFactor to simulate gravity.")
			gravity = Gravity.new
			
			say("We add gravity to the Environment.")
			@environment.environmental_factors << gravity
			
			say("Everything immediately drops.")
			animate(FRAME_COUNT)
			
		end
		
	end


	#Head toward a target.
	class ChaseAction < Action
		def do(creature, target)
			angle_to_target = Utility.find_angle(creature.location, target.location)
			creature.vector.pitch = angle_to_target
		end
	end
	#Act only on food.
	class FoodCondition < Condition
		def test(creature, target)
			target.tags.include?('food')
		end
	end
	
	#Demonstrates creature behaviors.
	def test_behaviors

		populate(@environment)
		
		thread = Thread.new do

			say("Let's add a behavior to our creatures.")
			chase = Behavior.new
			
			say("We'll have them head straight toward their target.")
			chase.actions << ChaseAction.new
			
			say("So that they don't target every creature on the screen, we'll add a condition to the behavior saying the target must have the label 'food'.")
			chase.conditions << FoodCondition.new
			
			say("We'll apply this behavior to all creatures currently in the environment.")
			@environment.objects.each {|creature| creature.behaviors << chase}
			animate(FRAME_COUNT)
			
			say("Then we'll toss a piece of food (a GameObject with the label 'food') into the environment.")
			@environment.objects << GameObject.new(
				"target", #Name.
				Location.new(@view.width / 2, @view.height / 2),
				Color.new(1, 1, 1),
				Vector.new(50, 315),
				0, #Age.
				DEFAULT_OBJECT_SIZE * 2, #Size.
				["food"] #Tags.
			)
			
			say("Let's see what the creatures do.")
			animate(FRAME_COUNT)
			
		end
		
	end


	#A Creature that changes the colors of other objects.
	class Morpher < Creature
		#Changes an object's color.
		class MorphAction
			def do(creature, target)
				target.color.red += 0.1 if target.color.red < creature.color.red
				target.color.green += 0.1 if target.color.green < creature.color.green
				target.color.blue += 0.1 if target.color.blue < creature.color.blue
			end
		end
		#True only for nearby targets.
		class DistanceCondition < Condition
			def test(creature, target)
				Utility.find_distance(creature.location, target.location) < 50
			end
		end
		def initialize(*arguments)
			super
			morph = Behavior.new
			#Shift the target's color to match the creature's.
			morph.actions << MorphAction.new
			#Act only on nearby targets.
			morph.conditions << DistanceCondition.new
			@behaviors << morph
		end
	end

	#Demonstrates changing object colors.
	def test_change_color

		populate(@environment)
		
		say("Creatures can influence any attribute of their target, such as its color.")
		say("This demo includes a Morpher class, which is a type of Creature.")
		say("Morphers are created with a single behavior, which shifts the color of any nearby target to match the Morpher's color.")
		
		say("Let's place a red Morpher...")
		@environment.objects << Morpher.new(nil, Location.new(0, 100), Color.new(1, 0, 0), Vector.new(100, 0), 0, DEFAULT_OBJECT_SIZE)
		say("a green one...")
		@environment.objects << Morpher.new(nil, Location.new(0, 150), Color.new(0, 1, 0), Vector.new(200, 0), 0, DEFAULT_OBJECT_SIZE)
		say("and a blue one...")
		@environment.objects << Morpher.new(nil, Location.new(0, 200), Color.new(0, 0, 1), Vector.new(300, 0), 0, DEFAULT_OBJECT_SIZE)
		
		say("And see what they do.")
		thread = Thread.new {animate(FRAME_COUNT)}
		
	end


	class AccelerateAction < Action
		def initialize
			@clock = Clock.new
		end
		def do(creature, target)
			creature.vector.speed += 100 * @clock.elapsed_time
		end
	end

	#Demonstrates altering object speed.
	def test_accelerate

		populate(@environment)
		
		thread = Thread.new do

		
			say("Many actions need to happen smoothly over time, such as accelerating at a given rate.")
			
			say("Here are some Creatures, just plodding along.")
			animate(FRAME_COUNT / 4)
			say("We're going to have them pick up the pace.")
			
			say("A Clock helps track the passage of time (obviously).")
			say("AccelerateAction is a class defined in this demo's source.")
			say("Each instance of AccelerateAction has a separate Clock object.")
			say("It uses that Clock to check to see how long it's been since it last took effect.")
			say("It will multiply that time by a given rate, say 100 meters/second.")
			say("Let's say it's been 0.1 seconds since this creature last accelerated.")
			say("100 times 0.1 is 10.")
			say("So we should add 10 meters/second to the creature's speed.")
			say("We add acceleration to all the creatures...")
			@environment.objects.each do |creature|
				accelerate = Behavior.new
				accelerate.actions << AccelerateAction.new
				creature.behaviors << accelerate
			end
			
			say("And watch them rocket away.")
			animate(FRAME_COUNT)
			
		end
		
	end


	class TurnAction < Action
		def initialize
			@clock = Clock.new
		end
		def do(creature, target)
			creature.vector.pitch += 90 * @clock.elapsed_time
		end
	end

	#Demonstrates altering object vectors.
	def test_turn

		populate(@environment, 20)
		
		thread = Thread.new do
		
			say("Turning smoothly requires tracking the rate of the turn as well.")
			animate(FRAME_COUNT / 2)
			
			say("This time we'll use the TurnAction class, also defined within this demo.")
			say("Again, we keep a separate Clock for each TurnAction.")
			say("It follows the same principle as accelerating.")
			say("We see how many seconds have elapsed, then multiply that by the turn rate (90 degrees/sec).")
			say("We add the result to the Vector angle.")
			say("We add the behavior to each Creature...")
			@environment.objects.each do |creature|
				turn = Behavior.new
				turn.actions << TurnAction.new
				creature.behaviors << turn
			end
			
			say("And watch things spiral out of control.")
			animate(FRAME_COUNT)
			
		end
		
	end


	class ApproachAction < Action
		def initialize(heading = Vector.new)
			@heading = heading
			@clock = Clock.new
		end
		def do(creature, target)
			#Find the difference between the current heading and the angle to the target.
			turn_angle = Utility.find_angle(creature.location, target.location) - @heading.pitch
			#If the angle is the long way around from the current heading, change it to the smaller angle.
			if turn_angle > 180 then
				turn_angle -= 360.0
			elsif turn_angle < -180 then
				turn_angle += 360.0
			end
			#The creature can only turn as fast as the elapsed time, of course.
			turn_angle = turn_angle * @clock.elapsed_time
			#Turn the appropriate amount.
			@heading.pitch += turn_angle
			#Apply the heading to the creature's movement vector.
			creature.vector += @heading
		end
	end

	#Demonstrates adding vectors.
	def test_approach

		populate(@environment, 50)
		
		say("When your car skids on ice, you might steer in a different direction, but you're going to keep following your original vector for a while.")
		say("Adding vectors together lets us simulate this.")
		
		say("Our ApproachAction adds the Vector the creature WANTS to follow to the Vector it's ACTUALLY following.")
		say("We also add a condition that it should only target food.")
		say("We add a behavior to all creatures...")
		@environment.objects.each do |creature|
			approach = Behavior.new
			approach.actions << ApproachAction.new(creature.vector)
			approach.conditions << FoodCondition.new
			creature.behaviors << approach
		end
		
		say("Add a target...")
		@environment.objects << Creature.new(
			"target",
			Location.new(@view.width / 2, @view.height / 3),
			Color.new(1, 1, 1),
			Vector.new(3, 0),
			0, #Age.
			DEFAULT_OBJECT_SIZE, #Size.
			["food"] #Tags.
		)
		
		say("And watch them all TRY to catch it.")
		thread = Thread.new {animate(FRAME_COUNT)}
		
	end


	#Demonstrates turning away from an object, instead of toward it.
	def test_flee

		populate(@environment, 20)
		
		say("Fleeing from something is just like approaching it, but we head in the OPPOSITE direction.")
		say("Just get the angle toward the object, then add 180 degrees.")
		
		#Keep a separate heading for each object.
		headings = Hash.new {|h, k| h[k] = Vector.new(k.vector.speed, k.vector.pitch)}
		
		#Create a behavior.
		max_turn_angle = 20
		flee = Behavior.new
		flee.actions << lambda do |creature, target|
		
			#Find the difference between the current heading and the angle AWAY from the target.
			turn_angle = Utility.find_angle(creature.location, target.location) - headings[creature].pitch + 180
			
			#If the angle is the long way around from the current heading, change it to the smaller angle.
			if turn_angle > 180 then
				turn_angle -= 360.0
			elsif turn_angle < -180 then
				turn_angle += 360.0
			end
			
			#If turn angle is greater than allowed turn speed, reduce it.
			turn_angle = Utility.constrain_value(turn_angle, max_turn_angle)
			
			#Turn the appropriate amount for the elapsed time.
			headings[creature].pitch += turn_angle
			
			#Apply the heading to the creature's movement vector.
			creature.vector += headings[creature]
			
		end
		
		#Flee from only the creature's predator.
		flee.conditions << lambda do |creature, target|
			target.tags.include?('predator')
		end
		
		#Add behavior to creatures.
		@environment.objects.each {|creature| creature.behaviors << flee}
		
		#Add a target.
		@environment.objects << Creature.new(
			"lion",
			Location.new(@view.width / 2, @view.height / 2),
			Color.new(1, 1, 1),
			Vector.new(3, 0),
			0, #Age.
			DEFAULT_OBJECT_SIZE * 2, #Size.
			["predator"] #Tags.
		)
		
		thread = Thread.new {animate(FRAME_COUNT)}
		
	end


	#A Behavior that eats the target.
	class Eat < Behavior
		#Environment from which targets will be removed.
		attr_accessor :environment
		def initialize(actions = [], conditions = [], environment = Environment.new)
			super(actions, conditions)
			@environment = environment
			#"Eat" target.
			self.actions << lambda do |creature, target|
				#Remove the target from the environment.
				@environment.objects.delete(target)
				#Grow in size.
				creature.size += target.size
			end
			#Act only if collided with target.
			self.conditions << lambda do |creature, target|
				Utility.collided?(creature, target)
			end
		end
	end


	#Demonstrates keeping a reference to an Environment so a Creature can alter it.
	def test_eat
	
		populate(@environment)
		
		say("Most games are all about destruction, but there hasn't been much so far.")
		say("Let's create a creature that causes some havoc.")
		predator = Creature.new(nil, Location.new(0, 150), Color.new(0, 1, 0), Vector.new(200, 0), 0, DEFAULT_OBJECT_SIZE * 2)
		
		say("This demo code includes a subclass of Behavior, called Eat.")
		eat = Eat.new
		
		say("We'll eat our targets by removing them from their environment.")
		say("Creatures and their Behaviors normally know nothing about the Environment they belong to, so we added an environment attribute to Eat.")
		say("Eat finds the target in Environment.objects and removes it.")
		eat.environment = @environment
		
		say("Add the Eat instance to the creature's behaviors...")
		predator.behaviors << eat
		
		say("Drop the creature into the actual environment...")
		@environment.objects << predator
		
		say("And - chomp!")
		thread = Thread.new {animate(FRAME_COUNT)}
		
	end


	#Run all the demos.
	def main
		say "After each demo, close the window to proceed."
		say("-" * 30)
		demo {test_render}
		demo {test_environmental_factors}
		demo {test_behaviors}
		demo {test_change_color}
		demo {test_accelerate}
		demo {test_turn}
		demo {test_approach}
		demo {test_flee}
		demo {test_eat}
	end


end


begin
	#Run the demos.
	Demo.new.main
rescue => exception
	#Print error to STDERR and exit with an abnormal status.
	abort "Error: " + exception.message
end
