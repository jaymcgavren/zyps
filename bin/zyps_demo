#!/usr/bin/ruby

# Copyright 2007-2009 Zyps Contributors.
# 
# This file is part of Zyps.
# 
# Zyps is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

$:.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

gems_loaded = false
begin
  require 'logger'
  require 'wx'
  require 'zyps'
  require 'zyps/actions'
  require 'zyps/conditions'
  require 'zyps/environmental_factors'
rescue LoadError
  if gems_loaded == false
    require 'rubygems'
    gems_loaded = true
    retry
  else
    raise
  end
end


module Zyps


#Base class of views in Zyps.
class View
  
  #A GUI toolkit-specific drawing area that will be used to render the view.
  #See WxCanvas and GTK2Canvas.
  attr_accessor :canvas
  #Scale of the view, with 1.0 being actual size.
  attr_accessor :scale
  #A Location which objects will be drawn relative to.
  attr_accessor :origin
  #Whether view should be erased before re-drawing.
  attr_accessor :erase_flag
  #Color that background should be drawn with.
  attr_accessor :background_color
  
  
  #Takes a hash with these keys and defaults:
  #  :canvas => nil,
  #  :scale => 1,
  #  :origin => Location.new(0.0),
  #  :erase_flag => true,
  #  :background_color => Color.black
  def initialize(options = {})
  
    options = {
      :canvas => nil,
      :scale => 1,
      :origin => Location.new(0, 0),
      :erase_flag => true,
      :background_color => Color.black
    }.merge(options)
    @canvas = options[:canvas]
    self.scale = options[:scale]
    self.origin = options[:origin]
    self.erase_flag = options[:erase_flag]
    
  end
  
  
  #Draw a rectangle to the canvas, compensating for origin and scale.
  #Takes a hash with these keys and defaults:
  #  :color => nil
  #  :border_width => 1
  #  :filled => true
  #  :location => nil
  #  :width => nil
  #  :height => nil
  def draw_rectangle(options = {})
    options = {
      :filled => true,
      :border_width => 1
    }.merge(options)
    x, y = drawing_coordinates(options[:location])
    self.canvas.draw_rectangle(
      :x => x,
      :y => y,
      :width => drawing_scale(options[:width]),
      :height => drawing_scale(options[:height]),
      :border_width => drawing_scale(options[:border_width]),
      :filled => options[:filled],
      :color => options[:color]
    )
  end
  
  
  #Draw a line to the canvas, compensating for origin and scale.
  #Takes a hash with these keys and defaults:
  #  :color => nil
  #  :width => nil
  #  :location_1 => nil
  #  :location_2 => nil
  def draw_line(options = {})
    x1, y1 = drawing_coordinates(options[:location_1])
    x2, y2 = drawing_coordinates(options[:location_2])
    self.canvas.draw_line(
      :x1 => x1,
      :y1 => y1,
      :x2 => x2,
      :y2 => y2,
      :width => drawing_scale(options[:width]),
      :color => options[:color]
    )
  end
  
  
  #Base update method to be overridden in subclass.
  #This method clears the canvas in preparation of drawing to the canvas.
  #It then iterates over each object in the environment and yields the object.
  #This allows the child class to update each object in its own specific manner,
  # by calling super and passing a block that performs the actual update
  def update(environment)
  
    clear_view if erase_flag
    
    #For each GameObject in the environment:
    #yields this object to the calling block
    environment.objects.each do |object|
      yield object
    end #environment.objects.each
    #render the canvas
    @canvas.render
    
  end #update
  
  
  private


    #Clear view.
    def clear_view
      @canvas.draw_rectangle(
        :color => Color.new(0, 0, 0),
        :filled => true,
        :x => 0, :y => 0,
        :width => @canvas.width, :height => @canvas.height
      )
    end
  
  
    #Convert a Location to x and y drawing coordinates, compensating for view's current scale and origin.
    def drawing_coordinates(location)
      [
        (location.x - origin.x) * scale,
        (location.y - origin.y) * scale
      ]
    end
    
    
    #Convert a width to a drawing width, compensating for view's current scale.
    def drawing_scale(units)
      units * scale
    end
  
  
end #View class


#Parent class for GUI framework-specific Canvas objects.
#Assign an instance to a View, and the drawing_area will be updated whenever the View is.
class Canvas


  #Dimensions of the drawing area.
  #Control should normally be left to the owner View object.
  attr_reader :width, :height


  def initialize(width = 1, height = 1)

    #Will be resized later.
    @width, @height = width, height

    #Arrays of shapes that will be painted when render() is called.
    @rectangle_queue = []
    @line_queue = []

  end


  #Takes a hash with these keys and defaults:
  #  :color => nil
  #  :border_width => 1
  #  :filled => true
  #  :x => nil
  #  :y => nil
  #  :width => nil
  #  :height => nil
  def draw_rectangle(options = {})
    options = {
      :filled => true,
      :border_width => 1
    }.merge(options)
    @rectangle_queue << options
  end


  #Takes a hash with these keys and defaults:
  #  :color => nil
  #  :width => nil
  #  :x1 => nil
  #  :y1 => nil
  #  :x2 => nil
  #  :y2 => nil
  def draw_line(options = {})
    @line_queue << options
  end


end

#Called by View objects for use in wxRuby applications.
#Assign an instance to a View, and the drawing_area will be updated whenever the View is.
class WxCanvas < Canvas


  #A Wx::Bitmap that will be painted on.
  attr_reader :buffer
  
  def initialize(width = 1, height = 1)

    super

    #Set buffer to match current width and height.
    resize
  
    #Hash of Wx::Pens used to draw in various colors and widths.
    @pens = Hash.new {|h, k| h[k] = Hash.new}
    #Hash of Wx::Brushes for various colors.
    @brushes = Hash.new
    
  end

  def width= (pixels) #:nodoc:
    @width = pixels
    resize
  end
  
  def height= (pixels) #:nodoc:
    @height = pixels
    resize
  end
  
  
  #Draw all objects to the drawing area.
  def render
    buffer.draw do |surface|
      #Draw all queued rectangles.
      render_rectangles(surface)
      #Draw all queued lines.
      render_lines(surface)
    end
  end
        
  
  #The Wx::Bitmap to draw to.
  def buffer
    @buffer ||= Wx::Bitmap.new(@width, @height)
  end

  
  private

  
    #Converts a Zyps Color to the toolkit's color class.
    def convert_color(color)
      Wx::Colour.new(
        (color.red * 255).floor,
        (color.green * 255).floor,
        (color.blue * 255).floor
      )
    end
  
  
    #Resize buffer and drawing area.
    def resize
      @buffer = nil #Causes buffer to reset its size next time it's accessed.
    end

    
    #Draw all queued rectangles to the given GC.
    def render_rectangles(surface)
      while options = @rectangle_queue.shift do
        surface.pen = get_pen(options[:color], options[:border_width]) #Used for border.
        if options[:filled]
          surface.brush = get_brush(options[:color])
        else
          surface.brush = Wx::TRANSPARENT_BRUSH
        end
        surface.draw_rectangle(
          options[:x], options[:y],
          options[:width], options[:height]
        )
      end
    end

      
    #Draw all queued lines to the given GC.
    def render_lines(surface)
      surface.pen.cap = Wx::CAP_ROUND
      while options = @line_queue.shift do
        surface.pen = get_pen(options[:color], options[:width])
        surface.draw_line(
          options[:x1].floor, options[:y1].floor,
          options[:x2].floor, options[:y2].floor
        )
      end
    end
    
    
    def get_pen(color, width)
      @pens[[color.red, color.green, color.blue]][width] ||= Wx::Pen.new(convert_color(color), width.ceil)
    end


    def get_brush(color)
      @brushes[[color.red, color.green, color.blue]] ||= Wx::Brush.new(convert_color(color), Wx::SOLID)
    end

    
end

#A view of game objects.
class TrailsView < View

  #Number of line segments to draw for each object.
  attr_accessor :trail_length

  #Takes a hash with these keys and defaults, in addition to those defined for the View constructor:
  #  :trail_length => 5
  def initialize (options = {})
  
    super
  
    options = {
      :trail_length => 5,
    }.merge(options)
    @trail_length = options[:trail_length]
    
    #Track a list of locations for each object.
    @locations = Hash.new {|h, k| h[k] = Array.new}
    
  end

  #Takes an Environment, and draws it to the canvas.
  #Tracks the position of each GameObject over time so it can draw a trail behind it.
  #The head will match the object's Color exactly, fading to black at the tail.
  #GameObject.size will be used as the line thickness at the object's head, diminishing to 1 at the tail.
  def update(environment)
  
    #For each GameObject in the environment:
    super do |object|

      object_radius = Math.sqrt(object.size / Math::PI)

      #Add the object's current location to the list.
      @locations[object.identifier] << object.location.copy

      #If the list is larger than the number of tail segments, delete the first position.
      @locations[object.identifier].shift while @locations[object.identifier].length > @trail_length

      #For each location in this object's list:
      @locations[object.identifier].each_with_index do |location, index|
      
        #Skip first location.
        next if index == 0
        
        #Divide the current segment number by trail segment count to get the multiplier to use for brightness and width.
        multiplier = index.to_f / @locations[object.identifier].length.to_f
        
        #Get previous location so we can draw a line from it.
        previous_location = @locations[object.identifier][index - 1]
        
        draw_line(
          :color => Color.new(
            object.color.red * multiplier,
            object.color.green * multiplier,
            object.color.blue * multiplier
          ),
          :width => (object_radius * 2 * multiplier).ceil,
          :location_1 => previous_location,
          :location_2 => location
        )
        
      end
      
    end
    
  end

  
end


end #module Zyps


include Zyps


LOG_LEVEL = Logger::WARN
LOG_HANDLE = STDOUT


class Demo < Wx::App


  #The view width.
  WIDTH = 400
  #The view height.
  HEIGHT = 300
  #Number of frames per second.
  FRAMES_PER_SECOND = 30
  #Default size of game objects.
  DEFAULT_OBJECT_SIZE = 78.5 #5 units in radius.

  
  #Initialize an Environment and a View.  Then run the demos.
  def on_init
  
    @log = Logger.new(LOG_HANDLE)
    @log.level = LOG_LEVEL
    @log.progname = self
    
    say "We're using wxRuby as the GUI framework for this demo."
    say "First, we need to create a Frame (window) to hold everything."
    frame = Wx::Frame.new(nil, :size => [WIDTH, HEIGHT], :title => "Zyps Demo")
    frame.evt_close {|event| exit}
    
    say "Zyps environments are displayed using Views."
    say "A TrailsView shows game objects with little light trails behind them."
    view = TrailsView.new
    say "We also assign the View a Canvas to draw to."
    say "Since our framework is wxWidgets, we'll use a WxCanvas."
    view.canvas = WxCanvas.new(WIDTH, HEIGHT)
    
    say "We need a place to draw our View to."
    say "We'll add a Wx::Window to the Frame."
    window = Wx::Window.new(frame)
    
    say "The world is called an Environment in Zyps.  Let's create a new one."
    @environment = Environment.new
    say "We tell the View to display our Environment by adding it as an Observer."
    @environment.add_observer(view)
    say "We'll also add this application as an observer, to track the number of updates."
    @update_count = 0
    @environment.add_observer(self)
    
    say "The Utility module calculates distances and angles between objects."
    say "Utility is sometimes asked to compute the same distance or angle over and over."
    say "We can speed this by returning a cached result instead of re-calculating it."
    say "Let's turn this feature on."
    Utility.caching_enabled = true
    
    say "We want to update the environment #{FRAMES_PER_SECOND} times per second."
    milliseconds_per_frame = (1.0 / FRAMES_PER_SECOND * 1000).to_int
    say "So, we'll set up a timer to fire every #{milliseconds_per_frame} milliseconds."
    timer_id = Wx::ID_HIGHEST + 1
    timer = Wx::Timer.new(self, timer_id)
    say "The timer will trigger the environment update."
    say "Then it copies the updated view's buffer to our window."
    say "We'll clear the cached values from the Utility module to save memory."
    say "We also call the Ruby garbage collector with each update."
    say "This keeps dead objects from accumulating and causing hiccups later."
    evt_timer(timer_id) do
      @environment.interact
      window.paint do |surface|
        surface.draw_bitmap(view.canvas.buffer, 0, 0, false)
      end
      Utility.clear_caches
      GC.start
    end
    timer.start(milliseconds_per_frame)
    
    say "Our final setup step is to show the window that will display it all."
    frame.show
    
  end
  
  
  #Watch for environment updates.
  #After a certain number, run the next demo.
  def update(environment)
    case @update_count
      when 0
        say "-" * 30
        test_render
      when 100
        test_render_2
        say "-" * 30
      when 200
        @environment.clear_objects
        test_environmental_factors
      when 300
        test_environmental_factors_2
        say "-" * 30
      when 400
        @environment.clear_objects
        @environment.clear_environmental_factors
        test_behaviors
      when 500
        test_behaviors_2
        say "-" * 30
      when 600
        @environment.clear_objects
        test_flee
        say "-" * 30
      when 700
        @environment.clear_objects
        test_turn
        say "-" * 30
      when 1100
        @environment.clear_objects
        test_eat
        say "-" * 30
      when 1200
        @environment.clear_objects
        test_explode
        say "-" * 30
      when 1300
        @environment.clear_objects
        @environment.clear_environmental_factors
        test_shoot
        say "-" * 30
      when 1400
        finish
    end
    @update_count += 1
  end

  
  #Populate an environment with the given number of creatures.
  def generate_creatures(count = 50)
    @log.debug "Generating #{count} creatures."
    objects = []
    count.times do |i|
      multiplier = i / count.to_f
      objects << Creature.new(
        :name => i,
        :location => Location.new(multiplier * WIDTH, multiplier * HEIGHT),
        :color => Color.new(multiplier, 1 - multiplier, multiplier / 2 + 0.5),
        :vector => Vector.new(100 * multiplier, multiplier * 360),
        :size => DEFAULT_OBJECT_SIZE
      )
    end
    objects
  end
  
  
  #Demonstrates drawing an environment and changing its size.
  def test_render

    say("The things in an Environment are called GameObjects.  Each object has:")
    object = GameObject.new
    say("...a name")
    object.name = "Huey"
    say("...a size")
    object.size = DEFAULT_OBJECT_SIZE
    say("...a Location with x and y coordiates")
    object.location = Location.new(WIDTH/2, HEIGHT/2)
    say("...a Color with red, green and blue components ranging from 0 to 1")
    object.color = Color.new(1, 0, 0)
    say("...and a Vector giving its speed and an angle from 0 to 360.")
    object.vector = Vector.new(10, 45)
    
    say("Once your object is ready, add it to the environment.")
    @environment.add_object(object)

  end
  
  def test_render_2
  
    say("Let's add a couple more objects with different colors and vectors.")
    @environment.add_object GameObject.new(
      :name => "Duey",
      :location => Location.new(WIDTH/2, HEIGHT/2),
      :color => Color.new(0, 1, 0),
      :vector => Vector.new(20, 135),
      :size => DEFAULT_OBJECT_SIZE * 2
    )
    @environment.add_object GameObject.new(
      :name => "Louie",
      :location => Location.new(WIDTH/2, HEIGHT/2),
      :color => Color.new(0, 0, 1),
      :vector => Vector.new(30, 225),
      :size => DEFAULT_OBJECT_SIZE * 3
    )
        
  end
  
  
  #Demonstrates environmental factors by adding gravity to the environment.
  def test_environmental_factors

    generate_creatures.each {|creature| @environment.add_object(creature)}
    
    say("Without gravity, objects just travel on forever.")
  
  end
  
  def test_environmental_factors_2
  
    say("Let's add a new EnvironmentalFactor to simulate gravity.")
    gravity = Gravity.new(200)
    
    say("We add gravity to the Environment.")
    @environment.add_environmental_factor gravity
    
    say("Everything immediately drops.")
    
  end


  #Demonstrates creature behaviors.
  def test_behaviors

    generate_creatures.each {|creature| @environment.add_object(creature)}
    
    say("Let's add a Behavior to our creatures.")
    chase = Behavior.new
    
    say("A Behavior has one or more Action objects that define an action to take on the current target.")
    say("We'll add an Action that makes the creatures head toward their target at 300 units per second.")
    chase.add_action ApproachAction.new(300)
    
    say("A Behavior also has one or more Condition objects.")
    say("Unless every Condition is true, the action(s) won't be carried out.")
    say("So that they don't target every creature on the screen, we'll add a condition to the behavior saying the target must have the label 'food'.")
    chase.add_condition TagCondition.new("food")
    
    say("We'll apply this behavior to all creatures currently in the environment.")
    @environment.objects.each {|creature| creature.add_behavior chase.copy}
    
  end
  
  def test_behaviors_2
    
    say("Then we'll toss a piece of food into the environment.")
    say("(It's just a GameObject with the tag 'food'.)")
    @environment.add_object GameObject.new(
      :name => "target",
      :location => Location.new(WIDTH / 2, HEIGHT / 2),
      :color => Color.white,
      :vector => Vector.new(30, 315),
      :size => DEFAULT_OBJECT_SIZE * 2, #Size.
      :tags => ["food"]
    )
    
    say("Now there's a target in the environment for which the condition is true.")
    say("All the Creatures will turn and chase it.")
    
  end


  #Demonstrates altering object vectors.
  def test_turn

    generate_creatures.each {|creature| @environment.add_object(creature)}
    
    say("This time we'll use the TurnAction class.")
    say("We tell each creature it should turn 90 degrees.")
    @environment.objects.each do |creature|
      turn = Behavior.new
      turn.add_action TurnAction.new(100, 90)
      creature.add_behavior turn
    end
    
  end


  #Demonstrates adding vectors.
  def test_flee

    generate_creatures.each {|creature| @environment.add_object(creature)}
    
    say("A FleeAction is just like an ApproachAction, but we head in the OPPOSITE direction.")
    @environment.objects.each do |creature|
      flee = Behavior.new
      flee.add_action FleeAction.new(300)
      flee.add_condition TagCondition.new("predator")
      creature.add_behavior flee
    end
    
    @environment.add_object Creature.new(
      :name => "hunter",
      :location => Location.new(WIDTH / 2, HEIGHT / 2),
      :vector => Vector.new(10, 0),
      :size => DEFAULT_OBJECT_SIZE,
      :tags => ["predator"]
    )
    
  end

  
  #Demonstrates keeping a reference to an Environment so a Creature can alter it.
  def test_eat
  
    generate_creatures.each {|creature| @environment.add_object(creature)}
    
    say("Most games are all about destruction, but there hasn't been much so far.")
    say("Let's create a creature that causes some havoc.")
    predator = Creature.new(
      :location => Location.new(0, 150),
      :color => Color.green,
      :vector => Vector.new(200, 0), 
      :size => DEFAULT_OBJECT_SIZE * 5
    )
    
    say("The EatAction eats targets by removing them from their environment.")
    action = EatAction.new
    
    say("Create a behavior...")
    behavior = Behavior.new
    say("Add the action to the behavior...")
    behavior.add_action action
    say("Add a condition that they must collide first...")
    behavior.add_condition CollisionCondition.new
    say("Add the behavior to the creature...")
    predator.add_behavior behavior
    
    say("Drop the creature into the actual environment...")
    @environment.add_object(predator)
    
    say("And - chomp!")
    
  end
  
  
  #Demonstrates InactiveLongerThanCondition.
  def test_explode
  
    say("Let's have some fireworks.")
    say("First we'll create 'stars' to load into the rocket.")
    star = Creature.new(:color => Color.red)
    say("A BlendAction will make them fade to black over time.")
    star.add_behavior Behavior.new(:actions => [BlendAction.new(0.5, Color.black)])
    say("An ExplodeAction copies prototype objects into the environment.")
    action = ExplodeAction.new
    say("We'll make copies of our star with random vectors.")
    say("We'll load these copies into our ExplodeAction.")
    25.times do |i|
      copy = star.copy
      copy.vector = Vector.new(rand(50), rand(360))
      action.prototypes << copy
    end
    
    say("It's just not smart to build fireworks without a fuse.")
    say("An InactiveLongerThanCondition should do nicely.")
    condition = InactiveLongerThanCondition.new
    say("This will be a short fuse, though, say 2 seconds.")
    condition.duration = 2
    
    say("We set up a Behavior with the Action and Condition...")
    explode = Behavior.new(:actions => [action], :conditions => [condition])
    say("Add the behavior to rockets aimed at the sky...")
    rocket = Creature.new(
      :behaviors => [explode],
      :vector => Vector.new(100, 260),
      :location => Location.new(WIDTH / 2, HEIGHT),
      :size => 50
    )
    rocket2 = rocket.copy
    rocket2.vector = Vector.new(130, 275)
    say("And light those suckers.")
    @environment << rocket << rocket2
    @environment << Gravity.new(30)
  
  end


  #Demonstrates ShootAction.
  def test_shoot
  
    say("I'm a big fan of shoot-em-up games.")
    say("The ability to make them easily is a major goal of Zyps.")
    
    say("Every shooter needs someone to play it, so let's make a player.")
    say("We give him a 'player' tag so enemies can target him.")
    player = Creature.new(
      :location => Location.new(WIDTH / 2, HEIGHT / 2),
      :behaviors => [
        Behavior.new(
          :actions => [FleeAction.new(100)],
          :conditions => [ProximityCondition.new(30)]
        )
      ],
      :size => DEFAULT_OBJECT_SIZE,
      :vector => Vector.new(10, 0),
      :tags => ['player']
    )
    
    say("Shooters need lots of bullets, of course.")
    say("A bullet doesn't need to be smart, but it should destroy the player when he gets too close.")
    bullet = Creature.new(
      :behaviors => [
        Behavior.new(
          :actions => [DestroyAction.new],
          :conditions => [
            ProximityCondition.new(7),
            TagCondition.new('player')
          ]
        )
      ],
      :vector => Vector.new(100, 0)
    )
    
    say("We're going to fire groups of 3 bullets at once.")
    bullets = [bullet, bullet.copy, bullet.copy]
    say("There's no point firing all 3 at the same spot...")
    say("We'll vary their angles a bit.")
    bullets.first.vector.pitch -= 10
    bullets.last.vector.pitch += 10
    
    say("And lastly, we need an enemy to fire the bullets at the player.")
    say("We'll give him a ShootAction, and assign it our group of bullets.")
    say("The action copies the bullets into the Environment and aims them at its target.")
    say("An InactiveLongerThanCondition makes it fire every 0.5 seconds.")
    enemy = Creature.new(
      :vector => Vector.new(30, 45),
      :behaviors => [
        Behavior.new(
          :actions => [ShootAction.new([bullets])],
          :conditions => [
            InactiveLongerThanCondition.new(0.5),
            TagCondition.new('player'),
          ]
        )
      ],
      :color => Color.green,
      :size => DEFAULT_OBJECT_SIZE
    )
    
    say("Game on!")
    @environment << player << enemy
  
  end


  #End the demos.
  def finish
    say "To learn more about how the library works, you can read the source code in the 'bin/zyps_demo' file in the Zyps distribution."
    say "And if you want to code your own Actions, Conditions, or EnvironmentalFactors, see the distribution's 'lib' folder for examples."
    say "Thanks for watching!"
  end
  
  
  private
  
    #Explain what's going on to the user.
    def say(phrase)
      puts phrase
    end

  
end


begin
  #Run the demos.
  Demo.new.main_loop
rescue SystemExit
  #No action.
rescue Exception => exception
  #Print error to STDERR and exit with an abnormal status.
  abort "Error: " + exception.message
end

