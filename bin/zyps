#!/usr/local/bin/ruby

# Copyright 2007-2008 Jay McGavren, jay@mcgavren.com.
# 
# This file is part of Zyps.
# 
# Zyps is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


gems_loaded = false
begin
	require 'logger'
	require 'wx'
	require 'yaml'
	require 'zyps'
	require 'zyps/actions'
	require 'zyps/conditions'
	require 'zyps/environmental_factors'
	require 'zyps/remote'
	require 'zyps/views/trails'
	require 'zyps/views/canvas/wx'
rescue LoadError
	if gems_loaded == false
		require 'rubygems'
		gems_loaded = true
		retry
	else
		raise
	end
end


include Zyps


LOG_HANDLE = STDOUT
LOG_LEVEL = Logger::WARN


#The Zyps GUI.
class Application < Wx::App


	#Takes a hash with these keys and defaults:
	#	:width => 800
	#	:height => 600
	#	:max_speed => 200
	#	:max_population => 100
	#	:fps => 60
	#	:enclosure => true
	#	:uri => nil
	def initialize(options = {})
	
		super()
	
		@log = Logger.new(LOG_HANDLE)
		@log.level = LOG_LEVEL
		@log.progname = self

		@log.debug "Load options and merge with defaults."
		@options = Configuration.load('options')
		@options = {
			:width => 800,
			:height => 600,
			:max_speed => 200,
			:max_population => 50,
			:fps => 30,
			:enclosure => true,
			:uri => nil,
		}.merge(options)
		@log.debug "options: #{@options.inspect}"
		
	end
	

	#Create GUI objects.
	def on_init
		
		@log.debug "Create the main window."
		frame = Wx::Frame.new(
			nil, #No parent.
			:size => [@options[:width], @options[:height]],
			:title => "Zyps"
		)
		@log.debug "All controls in frame should be resized when frame is."
		frame.sizer = Wx::BoxSizer.new(Wx::HORIZONTAL)
		@log.debug "Application should exit when frame is closed."
		frame.evt_close {on_exit}
		
		@log.debug "Create a view and canvas."
		@drawing_area = Wx::Window.new(frame)
		@drawing_area.min_size = [0, 0]
		frame.sizer.add(@drawing_area, 1, Wx::GROW)
		@view = TrailsView.new(
			:width => @options[:width],
			:height => @options[:height],
			:canvas => WxCanvas.new
		)
		@log.debug "Set up mouse click/drag handlers for canvas."
		@press_location = nil
		@drawing_area.evt_left_down {|event| on_mouse_press(event)}
		@drawing_area.evt_left_up {|event| on_mouse_release(event)}
		#Whenever the drawing area needs updating, copy the view's buffer over.
		@drawing_area.evt_paint {|event| @drawing_area.paint {|dc| render(dc)}}
		
		@log.debug "Create menus."
		@menus = MenuSet.new(frame)
		evt_menu(@menus.open_menu) {|event| on_open_menu(event)}
		evt_menu(@menus.save_menu) {|event| on_save_menu(event)}
		evt_menu(@menus.save_as_menu) {|event| on_save_as_menu(event)}
		evt_menu(@menus.exit_menu) {|event| on_exit}
		evt_menu(@menus.using_zyps_menu) {|event| on_using_zyps_menu(event)}
		evt_menu(@menus.about_menu) {|event| on_about_menu(event)}

		@log.debug "Create an interface."
		@controls = ControlPanel.new(frame)
		@controls.clear_button.evt_button(@controls.clear_button.get_id) do |event|
			@environment.objects.clear
		end
		@controls.length_slider.evt_slider(@controls.length_slider.get_id) do |event|
			@view.trail_length = @controls.length_slider.value
		end
		frame.sizer.add(@controls, 0, Wx::GROW)
		
		@log.debug "Create an environment, and link it to the view."
		@environment = Environment.new
		@environment.add_observer(@view)
		
		@log.debug "Set up environmental factors."
		if @options[:enclosure]
			@enclosure = Enclosure.new(
				:left => 0,
				:bottom => 0,
				:top => @drawing_area.size.height,
				:right => @drawing_area.size.width
			)
			@environment.environmental_factors << @enclosure
		end
		@environment.environmental_factors << SpeedLimit.new(@options[:max_speed]) if @options[:max_speed]
		@environment.environmental_factors << PopulationLimit.new(@options[:max_population]) if @options[:max_population]
		
		@log.debug "Set up a creature generator."
		@generator = CreatureGenerator.new(:environment => @environment)
		
		@log.debug "Set the Utility module to cache distances and angles."
		Utility.caching_enabled = true
		
		@log.debug "Set up a timer to update the environment."
		milliseconds_per_frame = (1.0 / @options[:fps] * 1000).to_int
		@log.debug "Timer will fire every #{milliseconds_per_frame} milliseconds."
		timer_id = Wx::ID_HIGHEST + 1
		timer = Wx::Timer.new(self, timer_id)
		evt_timer(timer_id) {on_timer}
		timer.start(milliseconds_per_frame)
		
		
		if @options[:uri]
			@log.debug "Start a network service at #{@options[:uri]}."
			server = EnvironmentServer.new(@environment, @options[:uri])
			server.start
			$SAFE = 1
		end
		
		@log.debug "Display GUI."
		frame.send_size_event
		frame.show
	
	end


	#Update environment and view.
	def on_timer
		#Resize playfield if window has been resized.
		if @view.height != @drawing_area.size.height || @view.width != @drawing_area.size.width
			@view.height = @drawing_area.size.height
			@view.width = @drawing_area.size.width
			@enclosure.top = @drawing_area.size.height
			@enclosure.right = @drawing_area.size.width
		end
		#Update environment.
		begin
			@environment.interact
		rescue Exception => exception
			puts exception, exception.backtrace
			raise
		end
		#If there are no Creatures, show instructions on creating them.
		if @environment.objects.empty?
			@view.canvas.buffer.draw do |dc|
				render_text_centered("Click and drag the mouse here to create creatures.", dc)
			end
		end
		#Update viewing area.
		@drawing_area.paint do |dc|
			#Copy from View to drawing area.
			render(dc)
		end
		#Almost all distances and angles will be different next update, so clear the cache.
		Utility.clear_caches
		#Keeps dead objects from accumulating and causing hiccups later.
		GC.start
	end
	
	
	#Save config and shut down.
	def on_exit
		Configuration.save('options', @options)
		exit
	end
	
	
	#When mouse button pressed, record location for use in release event handler.
	def on_mouse_press(event)
		@log.debug "Mouse pressed at #{event.x}, #{event.y}."
		@press_location = Location.new(event.x, event.y)
	end
	
	
	#Create a creature on button release.
	def on_mouse_release(event)
		@log.debug "Mouse released at #{event.x}, #{event.y}."
		#Ensure the mouse was pressed within the canvas.
		if @press_location
			#Create creature at release location.
			@release_location = Location.new(event.x, event.y)
			@log.debug "Release location: #{@release_location.inspect}"
			@environment.objects << @generator.create_creature(
				:x => event.x,
				:y => event.y,
				:speed => Utility.find_distance(@press_location, @release_location) * 2, #Use distance dragged as speed.
				:pitch => Utility.find_angle(@press_location, @release_location), #Move in direction of drag.
				:turn => @controls.turn_flag.is_checked,
				:approach => @controls.approach_flag.is_checked,
				:flee => @controls.flee_flag.is_checked,
				:push => @controls.push_flag.is_checked,
				:pull => @controls.pull_flag.is_checked,
				:breed => @controls.breed_flag.is_checked,
				:eat => @controls.eat_flag.is_checked
			)
			#Nullify press location, as it is no longer applicable.
			@press_location = nil
		end
	end
	
	
	#Takes a Wx::DC to copy the view to.
	def render(dc)
		#Copy the buffer to the device context.
		dc.draw_bitmap(@view.canvas.buffer, 0, 0, false)
	end	
		
	
	#Let user choose an environment save file.
	def on_open_menu(event)
		@log.debug "Set up a dialog to open a .zyp file.  Retain the directory the user moves to."
		dialog = Wx::FileDialog.new(
			@frame,
			:wildcard => "*.zyp",
			:style => Wx::FD_OPEN | Wx::FD_CHANGE_DIR
		)
		@log.debug "Act only if user presses OK."
		if dialog.show_modal == Wx::ID_OK
			begin
				@environment.objects = YAML.load_file(dialog.path)
				@object_file = dialog.path
			rescue Exception => exception
				show_alert(exception.message)
			end
		end
	end
	
	
	#Save environment to file, or choose a file if none is selected.
	def on_save_menu(event)
		if @object_file
			begin
				save_objects(@object_file)
			rescue Exception => exception
				show_alert(exception.message)
				on_save_as_menu(event)
			end
		else
			on_save_as_menu(event)
		end
	end
	
	
	#Let user provide a file name to save the environment to.
	def on_save_as_menu(event)
		@log.debug "Set up a dialog to save a .zyp file."
		@log.debug "Retain the directory the user moves to."
		@log.debug "Prompt before overwriting a file."
		dialog = Wx::FileDialog.new(
			@frame,
			:wildcard => "*.zyp",
			:style => Wx::FD_SAVE | Wx::FD_CHANGE_DIR | Wx::FD_OVERWRITE_PROMPT
		)
		@log.debug "Act only if user presses OK."
		if dialog.show_modal == Wx::ID_OK
			begin
				save_objects(dialog.path)
				@object_file = dialog.path
			rescue Exception => exception
				show_alert(exception.message)
			end
		end
	end
	
	
	#Display program info.
	def on_about_menu(event)
		show_message(<<EOD)
Zyps

http://jay.mcgavren.com/zyps

Copyright Jay McGavren, jay@mcgavren.com

Zyps is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
EOD
	end
	
	
	#Display program info.
	def on_using_zyps_menu(event)
		show_message(<<EOD)
Creating Creatures
Use the check boxes at the right to select the actions you want new creatures to perform.  Then click inside the playfield at the left to create a creature.
You can "launch" a creature by clicking and dragging the mouse in the playfield, then releasing.  The new creature will travel in the direction you drag the mouse cursor.

Controlling the View
The "Length" slider controls the length of the tail behind each creature.
Check the "Trails" checkbox to have creatures leave a winding trail behind them as they travel.  Uncheck it to make all trails disappear.

Controlling the Environment
Click the "Clear" button to clear all creatures from the environment (any trails will still be left behind).

Saving and Loading
Use the "Save As..." and "Save" menus under the File menu to save the environment to a ".zyp" file.  When you later reopen the file via the "Load" menu, all your creatures will be brought back.
EOD
	end
	
	
	#Save environment objects to the given path.
	def save_objects(path)
		File.open(path, "w") {|file| YAML.dump(@environment.objects, file)}
	end
	
	
	#Display an alert to the user.
	def show_alert(message)
		Wx::MessageDialog.new(
			@frame,
			:message => message,
			:caption => "Alert",
			:style => Wx::OK
		).show_modal
	end

	
	#Display a message to the user.
	def show_message(message)
		dialog = Wx::Dialog.new(@frame)
		dialog.sizer = Wx::BoxSizer.new(Wx::VERTICAL)
		text = Wx::TextCtrl.new(
			dialog,
			:style => Wx::TE_READONLY | Wx::TE_MULTILINE,
			:value => message
		)
		dialog.sizer.add(text, 1, Wx::EXPAND)
		ok_button = Wx::Button.new(dialog, Wx::ID_OK, "OK")
		dialog.sizer.add(ok_button, 0, Wx::ALIGN_CENTER_HORIZONTAL)
		ok_button.set_default
		ok_button.set_focus
		dialog.show_modal
	end
	
	
	#Draw the given text in the center of the given Wx::DC.
	def render_text_centered(string, dc)
		dc.text_foreground = Wx::Colour.new(255, 255, 255)
		dc.text_background = Wx::Colour.new(0, 0, 0)
		text_size = dc.get_text_extent(string)
		dc.draw_text(
			string,
			dc.size.width / 2 - (text_size[0] / 2),
			dc.size.height / 2 - (text_size[1] / 2)
		)
	end
	
	
end



#TODO
module Configuration
	def Configuration.load(name)
		{}
	end
	def Configuration.save(name, options)
	end
end



#Application menu system.
class MenuSet


	attr_accessor :open_menu
	attr_accessor :save_menu
	attr_accessor :save_as_menu
	attr_accessor :exit_menu
	attr_accessor :using_zyps_menu
	attr_accessor :about_menu


	#Takes the frame that will be its parent.
	def initialize(parent)
	
		menu_bar = Wx::MenuBar.new
		
		file_menu = Wx::Menu.new
		@open_menu = add_item(
			file_menu,
			:label => "&Open...\tCtrl+O",
			:id => Wx::ID_OPEN
		)
		@save_menu = add_item(
			file_menu,
			:label => "&Save\tCtrl+S",
			:id => Wx::ID_SAVE
		)
		@save_as_menu = add_item(
			file_menu,
			:label => "Save &As...\tCtrl+Shift+S",
			:id => Wx::ID_SAVEAS
		)
		file_menu.append_separator
		@exit_menu = add_item(
			file_menu,
			:label => "E&xit",
			:id => Wx::ID_EXIT
		)
		menu_bar.append(file_menu, "&File")
		
		help_menu = Wx::Menu.new
		@using_zyps_menu = add_item(
			help_menu,
			:label => "&Using Zyps",
			:id => Wx::ID_HELP_CONTENTS
		)
		help_menu.append_separator
		@about_menu = add_item(
			help_menu,
			:label => "&About",
			:id => Wx::ID_ABOUT
		)
		menu_bar.append(help_menu, "&Help")
		
		parent.set_menu_bar(menu_bar)
		
	end

	
	private
	
	
		def add_item(parent, options = {})
			options = {
				:id => Wx::ID_ANY,
				:label => "",
				:help_string => "",
				:kind => Wx::ITEM_NORMAL,
				:sub_menu => nil,
			}.merge(options)
			item = Wx::MenuItem.new(
				parent,
				options[:id],
				options[:label],
				options[:help_string],
				options[:kind],
				options[:sub_menu]
			)
			parent.append_item(item)
			item
		end
	
end



#Controls for manipulating the environment.
class ControlPanel < Wx::Panel


	attr_accessor :turn_flag
	attr_accessor :approach_flag
	attr_accessor :flee_flag
	attr_accessor :push_flag
	attr_accessor :pull_flag
	attr_accessor :breed_flag
	attr_accessor :eat_flag
	attr_accessor :length_slider
	attr_accessor :clear_button


	#Takes the frame/control that will be its parent.
	def initialize(parent)
	
		super(parent)
		self.sizer = Wx::BoxSizer.new(Wx::VERTICAL)

		action_controls = add_panel(self, :proportion => 2)
		add_label(action_controls, :label => "Actions")
		@turn_flag = add_check_box(action_controls, :label => "Turn")
		@approach_flag = add_check_box(action_controls, :label => "Chase")
		@flee_flag = add_check_box(action_controls, :label => "Flee")
		@push_flag = add_check_box(action_controls, :label => "Push")
		@pull_flag = add_check_box(action_controls, :label => "Pull")
		@breed_flag = add_check_box(action_controls, :label => "Breed")
		@eat_flag = add_check_box(action_controls, :label => "Eat")
		
		display_controls = add_panel(self, :proportion => 1)
		add_label(display_controls, :label => "Length")
		@length_slider = add_slider(display_controls, :min_value => 2, :max_value => 100)
		@length_slider.value = 5
		
		environment_controls = add_panel(self, :proportion => 1)
		add_label(environment_controls, :label => "Environment")
		@clear_button = add_button(environment_controls, :label => "Clear")
		
	end


	private
	
		#Other methods will call this with their particular type of control to add.
		#Adds control to parent's sizer if it has one.
		#Returns the control.
		def add_control(control)
			begin
				control.parent.sizer.add(control, 0, Wx::ALL, 3)
			rescue RuntimeError
				#Parent had no sizer; take no action.
				#Can't find another way to test for presence of a sizer as of wxRuby 1.9.2.
			end
			#Return the object.
			control
		end
	
		#Create a check box with the given label, and add it to the given container.
		def add_check_box(parent, options = {})
			add_control(Wx::CheckBox.new(parent, options))
		end

		#Create a slider control with the given options, and add it to the given container.
		def add_slider(parent, options = {})
			add_control(Wx::Slider.new(parent, options))
		end
		
		#Create a button with the given options, and add it to the given container.
		def add_button(parent, options = {})
			control = Wx::Button.new(parent, options)
			control.parent.sizer.add(control, 0, Wx::ALIGN_CENTER_HORIZONTAL|Wx::ALL, 3)
			control
		end
		
		#Create the given label, and add it to the given container.
		def add_label(parent, options = {})
			control = Wx::StaticText.new(parent, options)
			control.parent.sizer.add(control, 0, Wx::ALIGN_CENTER_HORIZONTAL|Wx::ALL, 3)
			control
		end
		
		#Create a panel, and add it to the given container.
		#Takes a hash with the following keys and defaults, in addition to those taken by Wx::Panel.new():
		#	:sizer => Wx::BoxSizer.new(Wx::VERTICAL)
		def add_panel(parent, options = {})
			options = {
				:sizer => Wx::BoxSizer.new(Wx::VERTICAL),
				:proportion => 1,
			}.merge(options)
			panel = Wx::Panel.new(parent, options)
			panel.sizer = options[:sizer]
			panel.parent.sizer.add(panel, options[:proportion], Wx::GROW|Wx::ALL, 3)
			panel
		end
		
		
end



#Creates Creature objects.
class CreatureGenerator


	#Environment creatures will be placed in.
	attr_accessor :environment
	#Default size of new creatures.
	attr_accessor :default_size
	#Default required proximity for actions.
	attr_accessor :default_proximity
	#Rate of new TurnActions.
	attr_accessor :turn_rate
	#Acceleration rate of new ApproachActions.
	attr_accessor :approach_rate
	#Acceleration rate of new FleeActions.
	attr_accessor :flee_rate
	#Strength of new PullActions.
	attr_accessor :pull_strength
	#Strength of new PushActions.
	attr_accessor :push_strength

	
	#Takes a hash with these keys and defaults:
	#	:environment => nil
	#	:default_size => 5
	#	:default_proximity => 200
	#	:approach_rate => 200
	#	:flee_rate => :approach_rate
	#	:push_strength => :approach_rate * 2
	#	:pull_strength => :push_strength * 0.75
	#	:turn_rate => :approach_rate * 1.1
	#	:turn_angle => 90
	#	:breed_rate => 10
	def initialize(options = {})
	
		#Set up logger.
		@log = Logger.new(LOG_HANDLE)
		@log.level = LOG_LEVEL
		@log.progname = self

		options = {
			:default_size => 5,
			:default_proximity => 200,
			:approach_rate => 200,
			:turn_angle => 90,
			:breed_rate => 10,
		}.merge(options)
		@log.debug "options: #{options.inspect}"
		
		@environment = options[:environment]
		@default_size = options[:default_size]
		@default_proximity = options[:default_proximity]
		@approach_rate = options[:approach_rate]
		@turn_angle = options[:turn_angle]
		@breed_rate = options[:breed_rate]
		@flee_rate = options[:flee_rate] || @approach_rate * 2
		@push_strength = options [:push_strength] || @approach_rate * 2
		@pull_strength = options[:pull_strength] || @push_strength * 0.75
		@turn_rate = options[:turn_rate] || @approach_rate * 1.1
		
	end
	
	
	#Create a creature with the given attributes and behaviors.
	#Takes a hash with these keys and defaults:
	#	:x => 0,
	#	:y => 0,
	#	:speed => 1,
	#	:pitch => 0,
	#	:size => @default_size,
	#	:action_proximity => @default_proximity,
	#	:turn => false,
	#	:approach => false,
	#	:flee => false,
	#	:push => false,
	#	:pull => false,
	#	:breed => false,
	#	:eat => false,
	def create_creature(options = {})
	
		options = {
			:x => 0,
			:y => 0,
			:speed => 1,
			:pitch => 0,
			:size => @default_size,
			:action_proximity => @default_proximity,
			:turn => false,
			:approach => false,
			:flee => false,
			:push => false,
			:pull => false,
			:breed => false,
			:eat => false,
		}.merge(options)
		@log.debug "options: #{options.inspect}"
		
		#Create a creature.
		creature = Creature.new(
			:location => Location.new(options[:x], options[:y]),
			:vector => Vector.new(options[:speed], options[:pitch]),
			:size => options[:size]
		)
		
		#Set up actions and merge colors according to selected behaviors.
		if options[:turn]
			color = color ? color + Color.blue : Color.blue
			creature.behaviors << Behavior.new(
				:actions => [TurnAction.new(@turn_rate, @turn_angle)]
			)
		end
		if options[:approach]
			color = color ? color + Color.red : Color.red
			creature.behaviors << Behavior.new(
				:actions => [ApproachAction.new(@approach_rate)],
				:conditions => [ProximityCondition.new(options[:action_proximity])],
				:condition_frequency => 10
			)
		end
		if options[:flee]
			color = color ? color + Color.yellow : Color.yellow
			creature.behaviors << Behavior.new(
				:actions => [FleeAction.new(@flee_rate)],
				:conditions => [ProximityCondition.new(options[:action_proximity] * 0.5)],
				:condition_frequency => 5
			)
		end
		if options[:push]
			color = color ? color + Color.violet : Color.violet
			creature.behaviors << Behavior.new(
				:actions => [PushAction.new(@push_strength)],
				:conditions => [ProximityCondition.new(options[:action_proximity] * 0.25)],
				:condition_frequency => 2
			)
		end
		if options[:pull]
			color = color ? color + Color.indigo : Color.indigo
			creature.behaviors << Behavior.new(
				:actions => [PullAction.new(@pull_strength)],
				:conditions => [ProximityCondition.new(options[:action_proximity] * 0.75)],
				:condition_frequency => 7
			)
		end
		if options[:breed]
			color = color ? color + Color.orange : Color.orange
			creature.behaviors << Behavior.new(
				:actions => [BreedAction.new(@environment, @breed_rate)],
				:conditions => [CollisionCondition.new], #The default ProximityCondition won't do.
				:condition_frequency => 1
			)
		end
		if options[:eat]
			color = color ? color + Color.green : Color.green
			creature.behaviors << Behavior.new(
				:actions => [EatAction.new(@environment)],
				:conditions => [
					StrengthCondition.new, #The eater should be as strong or stronger than its dinner.
					CollisionCondition.new #The default ProximityCondition won't do.
				],
				:condition_frequency => 1
			)
		end
		
		creature.color = color
		
		@log.debug "Created creature: #{creature.to_s}"
		
		creature
		
	end
	
	
end


begin
	Application.new.main_loop
rescue SystemExit
	#No action.
rescue Exception => exception
	#Print error to STDERR and exit with an abnormal status.
	abort "Error: " + exception.message
end
